datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts      Account[] 
  orders        Order[]
  reviews       Review[]   
  role Role @default(USER)
}
enum Role {
  ADMIN
   USER
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 model Order{
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  amount            Float
  userId            String  @db.ObjectId
  status            String
  currency          String
  paymentIntentId   String? 
  deliveryStatus    String
  address           Address?
  products          ProductType[]
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Product{
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  name              String 
  description       String 
  price             Float
  brand             String
  inStock           Boolean
  category          String
  images             Image[]
  reviews           Review[]
}

model Review{
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    productId         String  @db.ObjectId
    rating            String
    comment           String
    createdDate       DateTime @default(now())

    product Product @relation(fields: [productId], references: [id])
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

 type Address{
    street1 String
    street2 String
    city String
    state String
    zip String
    country String
  }

  type ProductType{
    id String
    name String
    description String
    category String
    brand String
    price Float
    quantity Int
    selectedImg Image
    }
  type Image{
    color String
    image String
    colorCode String
    publicId String
  }
 

